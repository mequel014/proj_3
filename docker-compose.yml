name: sillytavern

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ai_db
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ai_password
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [web]
    restart: unless-stopped

  adminer:
    image: adminer:4
    networks: [web]
    restart: unless-stopped
    # Доступ через nginx по https://sillytavern.ru/adminer/

  smtp:
    # Mailpit — удобен для теста почты. В проде укажите внешний SMTP в переменных бэка.
    image: axllent/mailpit:latest
    environment:
      MP_MAX_MESSAGES: 5000
      MP_SMTP_AUTH_ACCEPT_ANY: "1"
      MP_SMTP_AUTH_ALLOW_INSECURE: "1"
    networks: [web]
    restart: unless-stopped
    # Web UI почты через nginx: https://sillytavern.ru/mail/
    # SMTP доступен по внутреннему имени "smtp:1025"

  backend:
    build:
      context: ./ai_backend
      dockerfile: Dockerfile
    env_file:
      - ./ai_backend/.env
    environment:
      # В продакшне принудительно используем Postgres (локально .env оставляет sqlite)
      DATABASE_URL: postgresql+psycopg://ai_user:ai_password@postgres:5432/ai_db
      DB_ECHO: "false"
      # SMTP: по умолчанию шлём в mailpit (для теста)
      SMTP_HOST: smtp
      SMTP_PORT: 1025
      SMTP_TLS: "false"
      # Если используете реальный SMTP провайдер:
      # SMTP_HOST: smtp.mailgun.org
      # SMTP_PORT: 587
      # SMTP_USERNAME: your_username
      # SMTP_PASSWORD: your_password
      # SMTP_TLS: "true"
      # ALLOWED_ORIGINS: https://sillytavern.ru
    depends_on:
      postgres:
        condition: service_healthy
    networks: [web]
    restart: unless-stopped

  frontend:
    build:
      context: ./ai_frontend
      dockerfile: Dockerfile
    env_file:
      - ./ai_frontend/.env.production
    environment:
      NITRO_PORT: 3000
      NITRO_HOST: 0.0.0.0
    networks: [web]
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./deploy/nginx/ssl-params.conf:/etc/nginx/snippets/ssl-params.conf:ro
      - certbot-webroot:/var/www/certbot
      - letsencrypt:/etc/letsencrypt
    networks: [web]
    restart: unless-stopped

  certbot:
    image: certbot/certbot:latest
    volumes:
      - letsencrypt:/etc/letsencrypt
      - certbot-webroot:/var/www/certbot
    entrypoint: sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --quiet; sleep 12h; done'
    networks: [web]
    restart: unless-stopped

volumes:
  pgdata:
  letsencrypt:
  certbot-webroot:

networks:
  web: